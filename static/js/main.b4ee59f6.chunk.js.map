{"version":3,"sources":["logo.svg","context/AuthContext.jsx","hoc/PrivateRoute.jsx","UI/Logout.jsx","UI/Navigation.jsx","components/Login.jsx","components/Playlist.jsx","api/spotify.jsx","components/Playlists.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","AuthContext","React","createContext","token","onTokenChange","isAuthenticated","logout","PrivateRoute","Component","component","rest","useContext","render","props","to","pathname","state","from","location","Logout","onClick","Navigation","className","url","join","Login","authContext","useEffect","console","log","window","history","hash","access_token","substring","split","reduce","initial","item","parts","decodeURIComponent","JSON","stringify","push","src","logo","alt","href","rel","Playlist","playlist","name","img","tracks","useState","showTracks","setShowTracks","tracksContainer","map","track","width","height","prev","baseURL","buildHeaders","Authorization","Accept","Spotify","this","axiosInstance","axios","create","headers","userInfo","data","method","devices","deviceId","uris","getUserInfo","getPlaylists","id","playlists","Promise","all","items","a","getTracks","images","userId","playlistId","Playlists","spotify","useMemo","setPlaylists","addPlaylists","newPlaylists","getMyPlaylists","key","Home","changeSongToDisco","getDevices","changeSongInDevice","App","path","exact","Boolean","hostname","match","app","setToken","Provider","value","newToken","children","basename","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b4ee59f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {useState} from 'react';\n\nconst defaultContext = {\n  token: null,\n  onTokenChange: () => {},\n  isAuthenticated: () => {},\n  logout: () => {}\n};\n\nconst AuthContext = React.createContext(defaultContext);\nexport default AuthContext\n\nexport const AuthContextProvider = props => {\n  const [token, setToken] = useState(null);\n\n  const updateToken = newToken => {\n    console.log(`NOWY TOKEN: ${newToken}`)\n    setToken(newToken)\n  }\n\n  const logout = () => {\n    console.log(`Logging out...`)\n    setToken(null)\n  }\n\n  const isAuthenticated  = () => Boolean(token)\n\n  return (\n    <AuthContext.Provider value={{\n      token: token,\n      onTokenChange: updateToken,\n      isAuthenticated: isAuthenticated,\n      logout: logout,\n    }}>\n      {console.log(token)}\n      {props.children}\n    </AuthContext.Provider>\n  );\n};\n","// This is used to determine if a user is authenticated and\n// if they are allowed to visit the page they navigated to.\n\n// If they are: they proceed to the page\n// If not: they are redirected to the login page.\nimport React, {useContext} from 'react';\nimport {Redirect, Route} from 'react-router-dom';\nimport AuthContext from './../context/AuthContext';\n\nconst PrivateRoute = ({component: Component, ...rest}) => {\n  const {isAuthenticated} = useContext(AuthContext);\n\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        isAuthenticated() ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to={{pathname: '/login', state: {from: props.location}}} />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","import React, {useContext} from 'react'\nimport AuthContext from './../context/AuthContext'\n\nconst Logout = () => {\n  const {logout} = useContext(AuthContext)\n\n  return (\n    <button onClick={() => logout()}>Logout</button>\n  )\n\n}\n\nexport default Logout\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport Logout from './Logout'\n\nimport './Navigation.scss';\n\nconst Navigation = props => {\n  return (\n    <nav className=\"Navigation\">\n      <ul className=\"NavItems\">\n        <li className=\"NavItem\">\n          <Link to=\"/\">Home</Link>\n        </li>\n        <li className=\"NavItem\">\n          <Link to=\"/playlists\">Playlists</Link>\n        </li>\n        <li className=\"NavItem\">\n          <Link to=\"/favourites\">Favourites</Link>\n        </li>\n        <li className=\"NavItem\">\n          <Logout />\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React, {useEffect, useContext} from 'react';\nimport logo from './../logo.svg';\nimport AuthContext from './../context/AuthContext'\n\nconst CLIENT_ID = 'c2c889279e7140c683ec1c7cdd8bb977';\nconst TARGET = 'https://accounts.spotify.com';\nconst ENDPOINT = '/authorize';\nconst REDIRECT_URI = process.env.NODE_ENV === 'production' ? 'https://rungokarol.github.io/spotify-api/' : 'http://localhost:3000/'\nconst SCOPES = [\n  'user-top-read',\n  'user-read-currently-playing',\n  'user-read-playback-state',\n  'user-modify-playback-state',\n];\n\nconst url = `${TARGET}${ENDPOINT}?\nclient_id=${CLIENT_ID}&\nredirect_uri=${REDIRECT_URI}&\nscope=${SCOPES.join('%20')}&response_type=token&show_dialog=true`;\n\nconst Login = props => {\n  const authContext = useContext(AuthContext);\n  // console.log(authContext)\n\n  useEffect(() => {\n    console.log(window.history.state)\n    if(window.history.state === null) {\n      console.log(`null history state`)\n      return\n    }\n    let hash = window.history.state.state.from.hash\n    if (!hash) {\n      console.log(`nullable hash`)\n      return\n    }\n    console.log(hash)\n    const { access_token } = hash\n      .substring(1)\n      .split('&')\n      .reduce(function(initial, item) {\n        if (item) {\n          var parts = item.split('=');\n          initial[parts[0]] = decodeURIComponent(parts[1]);\n        }\n        return initial;\n      }, {});\n    console.log(JSON.stringify(access_token))\n    if (access_token) {\n      console.log(`update token: ${access_token}`)\n      authContext.onTokenChange(access_token);\n      props.history.push('/home')\n    }\n  }, [authContext, props.history]);\n\n  return (\n    <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <p>\n        Edit <code>src/App.js</code> and save to reload.\n      </p>\n      <a className=\"App-link\" href={url} rel=\"noopener noreferrer\">\n        Connect with Spotify\n      </a>\n    </header>\n  );\n};\n\nexport default Login;\n","import React, {useState} from 'react';\n\nimport './Playlist.scss';\n\nconst Playlist = ({playlist: {name, img, tracks}}) => {\n  const [showTracks, setShowTracks] = useState(false)\n\n  const toggleShowTracks = () => {\n    setShowTracks(prev => !prev)\n  }\n\n  const tracksContainer = showTracks ? (\n  <div className=\"Playlist--tracks\">\n    {tracks && tracks.map(track => <p>{track}</p>)}\n  </div>\n  ) : null\n\n  return (<div className=\"Playlist\">\n  <h1>{name}</h1>\n  <img src={img.url} alt=\"Logo\" width={img.width} height={img.height} onClick={toggleShowTracks}/>\n  {tracksContainer}\n</div>)\n};\n\nexport default Playlist;\n","import axios from 'axios';\n\nconst baseURL = 'https://api.spotify.com/v1';\nconst buildHeaders = token => ({\n  Authorization: `Bearer ${token}`,\n  'Content-Type': 'application/json',\n  Accept: 'application/json',\n});\n\nclass Spotify {\n  constructor(token) {\n    this.axiosInstance = axios.create({\n      baseURL: baseURL,\n      headers: buildHeaders(token),\n    });\n  }\n\n  async getUserInfo() {\n    const userInfo = await this.axiosInstance({\n      url: `/me`,\n    });\n    return userInfo.data\n  }\n  async getDevices() {\n    const devices = await this.axiosInstance({\n      url: `/me/player/devices`,\n      method: 'get',\n    });\n    return devices.data\n  }\n\n  changeSongInDevice(deviceId) {\n    return this.axiosInstance({\n      url: `/me/player/play?device_id=${deviceId}`,\n      method: 'put',\n      data: JSON.stringify({\n        uris: ['spotify:track:6q5FIPaFNs5XLvKLKfSdnT'],\n      }),\n    });\n  }\n\n  async getMyPlaylists() {\n    const userInfo = await this.getUserInfo();\n    const playlists = await this.getPlaylists(userInfo.id);\n\n    return await Promise.all(playlists.items.map(async item => {\n      const tracks = await this.getTracks(item.id)\n      return {\n        id: item.id,\n        name: item.name,\n        img: item.images[2],\n        tracks: tracks.items.map(({track}) => track.name),\n      }\n    }));\n  }\n\n  async getPlaylists(userId) {\n    const playlists = await this.axiosInstance({\n      url: `/users/${userId}/playlists`,\n      method: 'get',\n    });\n    return playlists.data;\n  }\n\n  async getTracks(playlistId) {\n    const tracks = await this.axiosInstance({\n      url: `/playlists/${playlistId}/tracks`,\n      method: 'get',\n    });\n    return tracks.data;\n  }\n}\n\nexport default Spotify;\n","import React, {useContext, useEffect, useState, useMemo} from 'react';\nimport AuthContext from './../context/AuthContext';\nimport Playlist from './Playlist';\n\nimport Spotify from './../api/spotify';\n\nimport './Playlists.scss';\n\nconst Playlists = props => {\n  const {token} = useContext(AuthContext);\n  const spotify = useMemo(() => new Spotify(token), [token]);\n\n  const [playlists, setPlaylists] = useState([]);\n\n  const addPlaylists = newPlaylists => {\n    setPlaylists([...newPlaylists]);\n  };\n\n  useEffect(() => {\n    (async () => {\n      addPlaylists(await spotify.getMyPlaylists());\n    })();\n  }, [spotify]);\n\n  return (\n    <div className=\"Playlists\">\n      <h2>Playlists!</h2>\n      {playlists.map(playlist => (\n        <Playlist key={playlist.id} playlist={playlist} />\n      ))}\n    </div>\n  );\n};\n\nexport default Playlists;\n","import React, {useContext} from 'react';\nimport AuthContext from './../context/AuthContext';\nimport Spotify from './../api/spotify';\n\nconst Home = props => {\n  const {token} = useContext(AuthContext);\n  const spotify = new Spotify(token);\n\n  const changeSongToDisco = async () => {\n    try {\n      const devices = await spotify.getDevices();\n      const deviceId = devices.data.devices[0].id;\n      console.log(deviceId);\n      spotify.changeSongInDevice(deviceId);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  return (\n    <div>\n      <button onClick={changeSongToDisco}> Change song </button>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\n\nimport {Route, Redirect, Switch} from 'react-router-dom';\nimport PrivateRoute from './hoc/PrivateRoute';\nimport Navigation from './UI/Navigation';\nimport Login from './components/Login';\nimport Playlists from './components/Playlists';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation />\n      <Switch>\n        <Route path=\"/login\" component={Login} />\n        <PrivateRoute exact path=\"/\" component={Home} />\n        <PrivateRoute path=\"/playlists\" component={Playlists} />\n        <Route render={() => <Redirect to=\"/\" />} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {AuthContextProvider} from './context/AuthContext';\nimport {BrowserRouter} from 'react-router-dom';\n\nconst basename = process.env.NODE_ENV === 'production' ? '/spotify-api' : '/'\n\nconst app = (\n  <AuthContextProvider>\n    <BrowserRouter basename={basename}>\n      <App />\n    </BrowserRouter>\n  </AuthContextProvider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}